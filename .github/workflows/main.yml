name: RDP
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 60   # اجعلها قصيرة لتفادي تشغيل طويل غير مقصود

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          # Enable Network Level Authentication (recommended)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 2 -Force
          # Configure firewall rule for RDP (keep it narrow if possible)
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User (from secrets)
        shell: powershell
        env:
          RDP_USER: ${{ secrets.RDP_USERNAME }}
          RDP_PASS: ${{ secrets.RDP_PASSWORD }}
        run: |
          $username = $env:RDP_USER
          $password = $env:RDP_PASS
          if (-not $username -or -not $password) {
              Write-Error "RDP_USERNAME or RDP_PASSWORD secret not set"
              exit 1
          }

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
          } else {
              Set-LocalUser -Name $username -Password $securePass
          }

          # Add to Remote Desktop Users (preferable). Only add to Administrators if necessary.
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
          # Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue

          # Basic check
          if (-not (Get-LocalUser -Name $username)) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        shell: powershell
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: powershell
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
              Write-Error "TAILSCALE_AUTH_KEY secret not set"
              exit 1
          }
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID
          Start-Sleep -Seconds 5
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          # Save IP to env for the next step (safe; not printing secrets)
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: Verify RDP Accessibility (no secret printed)
        shell: powershell
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Output access info (without password)
        shell: powershell
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address (Tailscale): $env:TAILSCALE_IP"
          Write-Host "Username: ${{ secrets.RDP_USERNAME }}"   # GitHub masks secrets in logs
          Write-Host "Password: (stored in repository secrets) -- do NOT print in logs"
          Write-Host "==================`n"
